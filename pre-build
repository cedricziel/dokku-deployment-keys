#!/usr/bin/env bash
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x
source "$PLUGIN_ENABLED_PATH/common/functions"

trigger-deployment-keys-pre-build() {
  declare desc="adds the deployment keys to the build environment"
  declare trigger="pre-build"
  declare BUILDER_TYPE="$1" APP="$2"
  if [[ "$BUILDER_TYPE" != "herokuish" ]]; then
    return
  fi

  IMAGE=$(get_app_image_name "$APP")

  APP_SPECIFIC_KEY_FOLDER="$DOKKU_ROOT/.deployment-keys/$APP/.ssh"
  SHARED_KEY_FOLDER="$DOKKU_ROOT/.deployment-keys/shared/.ssh"

  bash "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/install"
  [[ ! -f "$APP_SPECIFIC_KEY_FOLDER/id_rsa" ]] && [[ ! -f "$SHARED_KEY_FOLDER/id_rsa" ]] && return

  if [[ -f "$APP_SPECIFIC_KEY_FOLDER/id_rsa" ]]; then
    FINAL_SSH_FOLDER="$APP_SPECIFIC_KEY_FOLDER"
    KEYTYPE="app specific"
  else
    if [[ -f "$SHARED_KEY_FOLDER/id_rsa" ]]; then
      FINAL_SSH_FOLDER="$SHARED_KEY_FOLDER"
      KEYTYPE="shared"
    fi
  fi

  dokku_log_info1 "Adding $KEYTYPE deployment-keys to build environment"

  TMP_WORK_DIR=$(mktemp -d "/tmp/dokku-${DOKKU_PID}-${FUNCNAME[0]}.XXXXXX")
  CID_FILE="$(mktemp -u "/tmp/dokku-${DOKKU_PID}-${FUNCNAME[0]}.XXXXXX")"
  # shellcheck disable=SC2064
  trap "rm -rf '$TMP_WORK_DIR' '$CID_FILE' >/dev/null" RETURN

  # 1. Create the .ssh folder
  dokku_log_verbose_quiet "Creating .ssh folder for deployment-keys"
  "$DOCKER_BIN" container run $DOKKU_GLOBAL_RUN_ARGS -d --cidfile="$CID_FILE" "$IMAGE" /bin/bash -c "mkdir -p /app/.ssh"
  CID="$(cat "$CID_FILE")"
  rm -f "$CID_FILE"
  if [[ -z "$CID" ]]; then
    dokku_log_warn "Failure creating initial .ssh folder image"
    return 1
  fi

  if test "$("$DOCKER_BIN" container wait "$CID")" -ne 0; then
    dokku_log_warn "Failure creating .ssh folder"
    return 1
  fi

  "$DOCKER_BIN" container commit "$CID" "$IMAGE" >/dev/null

  # 2. Transfer the private key to the container
  dokku_log_verbose_quiet "Transferring $KEYTYPE private key to container"
  # shellcheck disable=SC2002
  cat "$FINAL_SSH_FOLDER/id_rsa" | "$DOCKER_BIN" container run $DOKKU_GLOBAL_RUN_ARGS --cidfile="$CID_FILE" -i -a stdin "$IMAGE" /bin/bash -c "cat >> /app/.ssh/id_rsa && chmod 600 /app/.ssh/id_rsa"
  CID="$(cat "$CID_FILE")"
  rm -f "$CID_FILE"
  if [[ -z "$CID" ]]; then
    dokku_log_warn "Failure creating app specific private key image"
    return 1
  fi

  if test "$("$DOCKER_BIN" container wait "$CID")" -ne 0; then
    dokku_log_warn "Failure transferring app specific private key"
    return 1
  fi

  "$DOCKER_BIN" container commit "$CID" "$IMAGE" >/dev/null

  # 3. Transfer the public key to the container
  dokku_log_verbose_quiet "Transferring $KEYTYPE public key to container"
  # shellcheck disable=SC2002
  cat "$FINAL_SSH_FOLDER/id_rsa.pub" | "$DOCKER_BIN" container run $DOKKU_GLOBAL_RUN_ARGS --cidfile="$CID_FILE" -i -a stdin $IMAGE /bin/bash -c "cat >> /app/.ssh/id_rsa.pub && chmod 600 /app/.ssh/id_rsa && chmod 644 /app/.ssh/id_rsa.pub && chown -R 1001:1001 /app/.ssh"
  CID="$(cat "$CID_FILE")"
  rm -f "$CID_FILE"
  if [[ -z "$CID" ]]; then
    dokku_log_warn "Failure creating app specific public key image"
    return 1
  fi

  if test "$("$DOCKER_BIN" container wait "$CID")" -ne 0; then
    dokku_log_warn "Failure transferring app specific public key"
    return 1
  fi

  "$DOCKER_BIN" container commit "$CID" "$IMAGE" >/dev/null

  # 4. Add identity file option to global SSH config
  dokku_log_verbose_quiet "Adding identity file option to global SSH config"
  echo "IdentityFile /app/.ssh/id_rsa" | docker run $DOKKU_GLOBAL_RUN_ARGS --cidfile="$CID_FILE" -i -a stdin $IMAGE /bin/bash -c "cat >> /etc/ssh/ssh_config"
  CID="$(cat "$CID_FILE")"
  rm -f "$CID_FILE"
  if [[ -z "$CID" ]]; then
    dokku_log_warn "Failure creating global SSH config image"
    return 1
  fi

  if test "$("$DOCKER_BIN" container wait "$CID")" -ne 0; then
    dokku_log_warn "Failure transferring global SSH config"
    return 1
  fi

  "$DOCKER_BIN" container commit "$CID" "$IMAGE" >/dev/null
}

trigger-deployment-keys-pre-build "$@"
